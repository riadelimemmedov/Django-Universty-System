version: '3.10'

services: #the different images that will be running as containers
  university: #service name
    container_name: university #container name
    build: . #build the image for the universty service from the dockerfile in parent directory
    command: sh -c "python manage.py runserver 0.0.0.0:8000" #command directive passes the parameters to the service and they will be executed by the service.In this example,these are django commands which will be executed in container where django lives
    volumes: #preserve data generated by the running container
      - .:/riade/OneDrive/Desktop/universty_system_django
    ports: #service runnig port
      - "8000:8000"
    environment:
      - DEBUG=1
      - DJANGO_ALLOWED_HOSTS = localhost 127.0.0.1
      - CELERY_BROKER = redis://redis:6379/0
      - CELERY_BACKEND = redis://redis:6379/0
    depends_on: #child container,whick integrated to inside universty container,work as a together
      - pgdb
      - redis
  celery:
    build: .
    command: celery -A config worker -l INFO
    volumes:
      - .:/riade/OneDrive/Desktop/universty_system_django
    depends_on:
      - university
      - redis
    restart: always

  pgdb:
      image: postgres
      container_name: pgdb #match to django HOST keyword
      env_file: .env
      volumes: 
        - pgdata:/var/lib/postgresql/data/
  redis:
    image: redis:6-alpine
volumes:
  pgdata:

