version: '3.8'

services: #the different images that will be running as containers
  university: #service name
    container_name: university #container name
    build: . #build the image for the universty service from the dockerfile in parent directory
    command: sh -c "python manage.py runserver 0.0.0.0:7000" #command directive passes the parameters to the service and they will be executed by the service.In this example,these are django commands which will be executed in container where django lives
    volumes: #preserve data generated by the running container
      - .:/riade/OneDrive/Desktop/universty_system_django
    ports: #service runnig port
      - "7000:7000"
    environment:
      - DEBUG=1
      #- DJANGO_ALLOWED_HOSTS = localhost 127.0.0.1 => if you want define,but some times not run django app localhost and return some error
      - CELERY_BROKER = redis://redis:6379
      - CELERY_BACKEND = redis://redis:6379
    depends_on: #child container,whick integrated to inside universty container,work as a together
      - pgdb
      - redis

  celery:
    container_name: celery-app
    build: .
    command: sh -c "celery -A config.celery worker --pool=solo -l info"
    volumes:
      - .:/riade/OneDrive/Desktop/universty_system_django
    depends_on:
      - university
      - redis
  
  pgdb:
      image: postgres
      container_name: pgdb #match to django HOST keyword
      env_file: .env
      volumes: 
        - pgdata:/var/lib/postgresql/data/

  redis:
    image: 'redis:alpine'
    command: sh -c "celery -A config beat -l info"

volumes:
  pgdata:

