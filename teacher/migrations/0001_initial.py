# Generated by Django 4.0 on 2023-02-04 04:25

from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('school', '0001_initial'),
        ('taggit', '0005_auto_20220424_2025'),
        ('account', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Designation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('created', models.DateField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Designation',
                'verbose_name_plural': 'Designations',
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('father_name', models.CharField(max_length=50, verbose_name='father name')),
                ('is_phd', models.BooleanField(default=False, verbose_name='is phd')),
                ('joining_date', models.DateField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='account.account')),
                ('designation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='designation_teacher', to='teacher.designation')),
                ('expertise', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('lessons', models.ManyToManyField(related_name='lessons_teacher', to='school.Lesson')),
            ],
            options={
                'verbose_name': 'Teacher',
                'verbose_name_plural': 'Teachers',
                'ordering': ['joining_date'],
            },
        ),
    ]
